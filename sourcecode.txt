package pgfsd.controller;

import pgfsd.entities.User;
import pgfsd.service.BookingService;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.annotation.*;
import java.io.IOException;

@WebServlet(name = "BookingsController", value = "/bookings-controller")
public class BookingsController extends HttpServlet {
    BookingService bookingService = new BookingService();
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession httpSession = request.getSession();
        User loggedUser = (User) httpSession.getAttribute("logged-user");
        if(loggedUser == null){
            request.setAttribute("booking-success", "Not a logged in user");
        } else {
            httpSession.setAttribute("bookings", bookingService.getAllBookings(loggedUser));
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doGet(request,response);
    }
}
package pgfsd.controller;

import pgfsd.entities.Airline;
import pgfsd.entities.Destination;
import pgfsd.entities.Flight;
import pgfsd.service.AirlineService;
import pgfsd.service.DestinationService;
import pgfsd.service.FlightService;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

@WebServlet("/flight-admin-controller")
public class FlightAdminController extends HttpServlet {
    private DestinationService destinationService;
    private AirlineService airlineService;
    private FlightService flightService;

    @Override
    public void init() throws ServletException {
        destinationService = new DestinationService();
        airlineService = new AirlineService();
        flightService = new FlightService();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession httpSession = request.getSession();
        httpSession.setAttribute("destinations", destinationService.getAllDestination());
        httpSession.setAttribute("airlines", airlineService.getAllAirlines());
        httpSession.setAttribute("flights", flightService.getAllFlights());
        httpSession.setAttribute("flight-airlines", flightService.getAirlineOptions());
        httpSession.setAttribute("flight-destinations", flightService.getDestinationOptions());
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        handleAirlinesPost(request, response);
        handleDestinationsPost(request, response);
        handleFlightsDeletePost(request, response);
        handleFlightsAddPost(request, response);
        doGet(request, response);
    }

    private void handleAirlinesPost(HttpServletRequest request, HttpServletResponse response) {
        HttpSession httpSession = request.getSession();

        Airline airline = new Airline(
                request.getParameter("airline-code"),
                request.getParameter("airline-name"));
        String addedAirline = airlineService.addAirline(airline);
        request.setAttribute("airline-added", addedAirline);

        Airline deleteAirline = new Airline(
                request.getParameter("airline-delete"),
                ""
        );
        String deletedAirline = airlineService.deleteAirline(deleteAirline);
        request.setAttribute("airline-deleted", deletedAirline);
    }


    private void handleDestinationsPost(HttpServletRequest request, HttpServletResponse response) {
        HttpSession httpSession = request.getSession();

        Destination destination = new Destination(
                request.getParameter("destination-code"),
                request.getParameter("destination-name"));
        String addedDestination = destinationService.addDestination(destination);
        request.setAttribute("destination-added", addedDestination);

        Destination deleteDestination = new Destination(
                request.getParameter("destination-delete"),
                ""
        );
        String deletedDestination = destinationService.deleteDestination(deleteDestination);
        request.setAttribute("destination-deleted", deletedDestination);
    }

    private void handleFlightsAddPost(HttpServletRequest request, HttpServletResponse response) {
        HttpSession httpSession = request.getSession();

        String flightIdInput = request.getParameter("flight-id");
        String airlineCodeInput = request.getParameter("flight-airline");
        String departureCodeInput = request.getParameter("flight-departure-destination");
        String arrivalCodeInput = request.getParameter("flight-arrival-destination");
        String departureDateInput = request.getParameter("flight-departure-date");
        String arrivalDateInput = request.getParameter("flight-arrival-date");
        String priceInput = request.getParameter("flight-price");

        Long flightId = null;
        Airline airline = null;
        Destination departure = null;
        Destination arrival = null;
        Date departureDate = null;
        Date arrivalDate = null;
        Double price = null;

        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm");
        try {
            flightId = Long.parseLong(flightIdInput);
        } catch (NumberFormatException e) {
            System.out.println("Flight add id provided not valid: " + flightIdInput);
            System.out.println(e.getMessage());
        }
        if (arrivalCodeInput != null && !airlineCodeInput.equals("")) {
            airline = new Airline(airlineCodeInput, "");
        }
        if (departureCodeInput != null && !departureCodeInput.equals("")) {
            departure = new Destination(departureCodeInput, "");
        }
        if (arrivalCodeInput != null && !arrivalCodeInput.equals("")) {
            arrival = new Destination(arrivalCodeInput, "");
        }
        try {
            if (departureDateInput == null) {
                throw new ParseException(departureCodeInput, 0);
            }
            departureDate = formatter.parse(departureDateInput);
        } catch (ParseException e) {
            System.out.println("Departure date provided not valid: " + departureDateInput);
            System.out.println(e.getMessage());
        }
        try {
            if (arrivalDateInput == null) {
                throw new ParseException(arrivalCodeInput, 0);
            }
            arrivalDate = formatter.parse(arrivalDateInput);
        } catch (ParseException e) {
            System.out.println("Arrival date provided not valid: " + arrivalDateInput);
            System.out.println(e.getMessage());
        }
        try {
            if (priceInput == null) {
                throw new NumberFormatException();
            }
            price = Double.parseDouble(priceInput);
        } catch (NumberFormatException e) {
            System.out.println("Flight price provided not valid: " + flightIdInput);
            System.out.println(e.getMessage());
        }

        String flightAdded = flightService.addFlight(
                new Flight(
                        flightId,
                        airline,
                        departure,
                        departureDate,
                        arrival,
                        arrivalDate,
                        price
                ));
        request.setAttribute("flight-added", flightAdded);
    }

    private void handleFlightsDeletePost(HttpServletRequest request, HttpServletResponse response) {
        HttpSession httpSession = request.getSession();

        String deleteFlightIdInput = request.getParameter("flight-delete");
        Long deleteFlightId = null;
        try {
            deleteFlightId = Long.parseLong(deleteFlightIdInput);
        } catch (NumberFormatException e) {
            System.out.println("Flight delete id provided not valid: " + deleteFlightIdInput);
            System.out.println(e.getMessage());
        }
        Flight deleteFlight = new Flight(deleteFlightId, null, null, new Date(), null, new Date(), 0.0);
        String deletedFlight = flightService.deleteDestination(deleteFlight);
        request.setAttribute("flight-deleted", deletedFlight);
    }

}package pgfsd.controller;

import pgfsd.dao.FlightDao;
import pgfsd.entities.Booking;
import pgfsd.entities.Flight;
import pgfsd.entities.User;
import pgfsd.service.BookingService;
import pgfsd.service.FlightService;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.annotation.*;
import java.io.IOException;

@WebServlet(name = "FlightBookingController", value = "/flight-booking-controller")
public class FlightBookingController extends HttpServlet {
    FlightService flightService = new FlightService();
    BookingService bookingService = new BookingService();

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession httpSession = request.getSession();
        String flightDetails = flightService.getFlightDetails(request.getParameter("flight"));
        if(flightDetails == null){
            request.setAttribute("search-error", "Flight not found");
            request.getServletContext()
                    .getRequestDispatcher("/index.jsp")
                    .forward(request,response);
            return;
        }
        httpSession.setAttribute("booking-flight", flightDetails);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        if(request.getParameter("email") != null ){
            doGet(request,response);
            return;
        }
        HttpSession httpSession = request.getSession();
        String bookingQuantityInput = request.getParameter("booking-quantity");
        String creditCardInput = request.getParameter("booking-credit-card");

        Flight flight = flightService.getFlightById(request.getParameter("flight"));
        if(flight == null){
            httpSession.setAttribute("search-error", "Flight id not valid");
            request.getServletContext()
                    .getRequestDispatcher("/index.jsp")
                    .forward(request,response);
            return;
        }
        User user = (User) httpSession.getAttribute("logged-user");
        Integer bookingQuantity = null;
        try{
            bookingQuantity = Integer.parseInt(bookingQuantityInput);
        } catch (Exception e){
            System.out.println("Booking quantity not valid :" + bookingQuantity);
        }
        boolean paid = false;
        try{
            Long creditCard = Long.parseLong(creditCardInput);
            if(creditCard > 0){
                paid = true;
            }
        } catch (NumberFormatException e){
            System.out.println("Credit card not valid: " + creditCardInput);
        }

        Booking booking = new Booking(flight, user, bookingQuantity, paid);
        String bookingAdded = bookingService.addBooking(booking);
        if(bookingAdded != null){
            request.setAttribute("booking-success", bookingAdded);
        } else {
            request.removeAttribute("booking-success");
            request.getRequestDispatcher("/bookings.jsp").forward(request,response);
        }

    }
}
package pgfsd.controller;

import pgfsd.entities.Destination;
import pgfsd.entities.Flight;
import pgfsd.service.FlightService;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.annotation.*;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

@WebServlet(name = "FlightSelectionController", value = "/flight-selection-controller")
public class FlightSelectionController extends HttpServlet {
    FlightService flightService = new FlightService();

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession httpSession = request.getSession();
        httpSession.setAttribute("destination-options", flightService.getDestinationOptions());
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String departureDestinationInput = request.getParameter("departure-destination");
        String arrivalDestinationInput = request.getParameter("arrival-destination");
        String departureDateInput = request.getParameter("departure-date");

        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
        Destination departureDestination = new Destination(departureDestinationInput, "");
        Destination arrivalDestination = new Destination(arrivalDestinationInput, "");
        Date departureDate = null;

        try {
            departureDate = formatter.parse(departureDateInput);
        } catch (Exception e) {
            System.out.println("Departure date not valid: " + departureDateInput);
            System.out.println(e.getMessage());
        }

        Flight flight = new Flight(
                0L,
                null,
                departureDestination,
                departureDate,
                arrivalDestination,
                new Date(),
                0.0);
        String canSearchFlight = flightService.canSearchFlight(flight);
        HttpSession httpSession = request.getSession();
        if (canSearchFlight == null) {
            httpSession.setAttribute("matching-flights", flightService.searchFlights(flight));
            httpSession.setAttribute("departure-destination", departureDestinationInput);
            httpSession.setAttribute("arrival-destination", arrivalDestinationInput);
            httpSession.setAttribute("departure-date", departureDateInput);
        } else {
            request.setAttribute("search-error", canSearchFlight);
        }
        doGet(request, response);
    }
}
package pgfsd.controller;

import pgfsd.entities.User;
import pgfsd.service.UserService;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.annotation.*;
import java.io.IOException;

@WebServlet(name = "LoginController", value = "/login-controller")
public class LoginController extends HttpServlet {
    UserService userService = new UserService();

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession httpSession = request.getSession();
        User userCheck = userService.checkUserCredentials(new User(
                request.getParameter("email"),
                request.getParameter("password"),
                null,
                null));
        if(userCheck != null){
            httpSession.setAttribute("logged-user", userCheck);
            String flightId = request.getParameter("flight");
            if( flightId != null && !flightId.equals("")){
                response.sendRedirect("book-flight.jsp?flight=" + flightId);
            } else {
                response.sendRedirect("index.jsp");
            }
        } else {
            request.setAttribute("login-error", "Login failed");
        }
    }
}
package pgfsd.controller;

import pgfsd.entities.User;
import pgfsd.service.UserService;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;

@WebServlet(name = "LogoutController", value = "/logout-controller")
public class LogoutController extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession(false);
        if (session != null) {
            session.invalidate();
        }
        request.setAttribute("logout-success", "Logout success");
        request.getRequestDispatcher("/index.jsp").forward(request,response);
    }
}
package pgfsd.controller;

import pgfsd.entities.User;
import pgfsd.service.UserService;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.annotation.*;
import java.io.IOException;

@WebServlet(name = "RegisterUserController", value = "/register-user-controller")
public class RegisterUserController extends HttpServlet {
    UserService userService = new UserService();
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        String nameInput = request.getParameter("name");
        String emailInput = request.getParameter("email");
        String passwordInput = request.getParameter("password");
        User user = new User(emailInput,passwordInput, nameInput, false);
        String registered = userService.registerNerUser(user);
        if(registered == null){
            User registeredUser = userService.checkUserCredentials(user);
            if(registeredUser != null){
                session.setAttribute("logged-user", registeredUser);
                String flightId = request.getParameter("flight");
                if( flightId != null && !flightId.equals("")){
                    response.sendRedirect("book-flight.jsp?flight=" + flightId);
                } else {
                    response.sendRedirect("index.jsp");
                }
                return;
            } else {
                request.setAttribute("registration-error", "Unable to register new user");
            }
        } else {
            request.setAttribute("registration-error", registered);
        }
        request.getRequestDispatcher("/login.jsp").forward(request,response);

    }
}
package pgfsd.controller;

import pgfsd.entities.Airline;
import pgfsd.entities.User;
import pgfsd.service.AirlineService;
import pgfsd.service.DestinationService;
import pgfsd.service.FlightService;
import pgfsd.service.UserService;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.annotation.*;
import java.io.IOException;

@WebServlet(name = "UserAdminController", value = "/user-admin-controller")
public class UserAdminController extends HttpServlet {
    private UserService userService;

    @Override
    public void init() throws ServletException {
        userService = new UserService();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession httpSession = request.getSession();
        httpSession.setAttribute("users", userService.getAllUsers());
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

        boolean admin = request.getParameter("admin") != null && request.getParameter("admin").equalsIgnoreCase("on");
        User user = new User(
                request.getParameter("email"),
                request.getParameter("password"),
                request.getParameter("name"),
                admin
        );
        String addedUser = userService.addUser(user);
        request.setAttribute("user-added", addedUser);

        User deleteUser = new User(
                request.getParameter("user-delete"),
                "",
                "",
                null
        );
        String deletedUser = userService.deleteUser(deleteUser);
        request.setAttribute("user-deleted", deletedUser);

        doGet(request, response);
    }
}
package pgfsd.dao;

import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import pgfsd.db.DBUtil;
import pgfsd.entities.Airline;


import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import java.util.Arrays;
import java.util.List;

public class AirlineDao {
    public boolean addAirline(Airline airline) {
        SessionFactory sessionFactory = DBUtil.sessionFactory;
        Session session = sessionFactory.openSession();
        Transaction transaction = session.beginTransaction();
        try {
            session.merge(airline);
            transaction.commit();
            session.close();
            return true;
        } catch (HibernateException e) {
            System.out.println(Arrays.toString(e.getStackTrace()));
            if (transaction != null) {
                transaction.rollback();
            }
            session.close();
            return false;
        }
    }

    public List<Airline> getAllAirlines() {
        SessionFactory factory = DBUtil.sessionFactory;
        Session session = factory.openSession();
        CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();
        CriteriaQuery<Airline> criteriaQuery = criteriaBuilder.createQuery(Airline.class);
        Root<Airline> root = criteriaQuery.from(Airline.class);
        List<Airline> allDestinations = session
                .createQuery(criteriaQuery.select(root))
                .getResultList();
        session.close();
        return allDestinations;
    }

    public boolean deleteAirline(Airline airline) {
        SessionFactory sessionFactory = DBUtil.sessionFactory;
        Session session = sessionFactory.openSession();
        Transaction transaction = session.beginTransaction();

        try {
            session.delete(airline);
            transaction.commit();
            session.close();
            return true;
        } catch (Exception e) {
            System.out.println(Arrays.toString(e.getStackTrace()));
            if (transaction != null) {
                transaction.rollback();
            }
            session.close();
            return false;
        }
    }
}
package pgfsd.dao;

import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import pgfsd.db.DBUtil;
import pgfsd.entities.Booking;
import pgfsd.entities.User;


import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class BookingDao {
    public boolean addBooking(Booking booking) {
        SessionFactory sessionFactory = DBUtil.sessionFactory;
        Session session = sessionFactory.openSession();
        Transaction transaction = session.beginTransaction();
        try {
            session.merge(booking);
            transaction.commit();
            session.close();
            return true;
        } catch (HibernateException e) {
            System.out.println(Arrays.toString(e.getStackTrace()));
            if (transaction != null) {
                transaction.rollback();
            }
            session.close();
            return false;
        }
    }

    public List<Booking> getAllBookings(User user) {
        SessionFactory factory = DBUtil.sessionFactory;
        Session session = factory.openSession();
        CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();
        CriteriaQuery<Booking> criteriaQuery = criteriaBuilder.createQuery(Booking.class);
        Root<Booking> root = criteriaQuery.from(Booking.class);
        List<Booking> bookings = new ArrayList<>();
        try {
            bookings = session
                    .createQuery(criteriaQuery.select(root).where(
                            criteriaBuilder.equal(root.get("user"), user)))
                    .getResultList();
        }
        catch (Exception e){
            System.out.println("error retrieving all bookings for user: " + user);
            session.close();
        }
        session.close();
        return bookings;
    }

    public boolean deleteBooking(Booking booking) {
        SessionFactory sessionFactory = DBUtil.sessionFactory;
        Session session = sessionFactory.openSession();
        Transaction transaction = session.beginTransaction();

        try {
            session.delete(booking);
            transaction.commit();
            session.close();
            return true;
        } catch (Exception e) {
            System.out.println(Arrays.toString(e.getStackTrace()));
            if (transaction != null) {
                transaction.rollback();
            }
            session.close();
            return false;
        }
    }
}
package pgfsd.dao;

import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import pgfsd.entities.Destination;
import pgfsd.db.DBUtil;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import java.util.Arrays;
import java.util.List;

public class DestinationsDao {
    public boolean addDestination(Destination destination) {
        SessionFactory sessionFactory = DBUtil.sessionFactory;
        Session session = sessionFactory.openSession();
        Transaction transaction = session.beginTransaction();
        try {
            session.merge(destination);
            transaction.commit();
            session.close();
            return true;
        } catch (HibernateException e) {
            System.out.println(Arrays.toString(e.getStackTrace()));
            if (transaction != null) {
                transaction.rollback();
            }
            session.close();
            return false;
        }
    }

    public List<Destination> getAllDestinations() {
        SessionFactory factory = DBUtil.sessionFactory;
        Session session = factory.openSession();
        CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();
        CriteriaQuery<Destination> criteriaQuery = criteriaBuilder.createQuery(Destination.class);
        Root<Destination> root = criteriaQuery.from(Destination.class);
        List<Destination> allDestinations = session
                .createQuery(criteriaQuery.select(root))
                .getResultList();
        session.close();
        return allDestinations;
    }

    public boolean deleteDestination(Destination destination) {
        SessionFactory sessionFactory = DBUtil.sessionFactory;
        Session session = sessionFactory.openSession();
        Transaction transaction = session.beginTransaction();

        try {
            session.delete(destination);
            transaction.commit();
            session.close();
            return true;
        } catch (Exception e) {
            System.out.println(Arrays.toString(e.getStackTrace()));
            if (transaction != null) {
                transaction.rollback();
            }
            session.close();
            return false;
        }
    }
}
package pgfsd.dao;

import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import pgfsd.db.DBUtil;
import pgfsd.entities.Flight;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

public class FlightDao {
    public boolean addFlight(Flight flight) {
        SessionFactory sessionFactory = DBUtil.sessionFactory;
        Session session = sessionFactory.openSession();
        Transaction transaction = session.beginTransaction();
        try {
            session.merge(flight);
            transaction.commit();
            session.close();
            return true;
        } catch (Exception e) {
            System.out.println(Arrays.toString(e.getStackTrace()));
            if (transaction != null) {
                transaction.rollback();
            }
            session.close();
            return false;
        }
    }

    public List<Flight> getAllFlights() {
        SessionFactory factory = DBUtil.sessionFactory;
        Session session = factory.openSession();
        CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();
        CriteriaQuery<Flight> criteriaQuery = criteriaBuilder.createQuery(Flight.class);
        Root<Flight> root = criteriaQuery.from(Flight.class);
        List<Flight> allFlights = session
                .createQuery(criteriaQuery.select(root))
                .getResultList();
        session.close();
        return allFlights;
    }

    public boolean deleteFlight(Flight flight) {
        SessionFactory sessionFactory = DBUtil.sessionFactory;
        Session session = sessionFactory.openSession();
        Transaction transaction = session.beginTransaction();

        try {
            session.delete(flight);
            transaction.commit();
            session.close();
            return true;
        } catch (Exception e) {
            System.out.println(Arrays.toString(e.getStackTrace()));
            if (transaction != null) {
                transaction.rollback();
            }
            session.close();
            return false;
        }
    }

    public List<Flight> searchFlights(Flight flight){
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(flight.getDepartureDate());
        calendar.add(Calendar.DATE, 1);
        Date nextDay = calendar.getTime();
        SessionFactory factory = DBUtil.sessionFactory;
        Session session = factory.openSession();
        CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();
        CriteriaQuery<Flight> criteriaQuery = criteriaBuilder.createQuery(Flight.class);
        Root<Flight> root = criteriaQuery.from(Flight.class);
        List<Flight> matchingFlights = session
                .createQuery(criteriaQuery.select(root).where(criteriaBuilder.and(
                        criteriaBuilder.equal(root.get("departureDestination"), flight.getDepartureDestination()),
                        criteriaBuilder.equal(root.get("arrivalDestination"), flight.getArrivalDestination()),
                        criteriaBuilder.between(root.get("departureDate"),flight.getDepartureDate(), nextDay)
                )))
                .getResultList();
        session.close();
        return matchingFlights;
    }

    public Flight getFlightById(String id) {
        SessionFactory factory = DBUtil.sessionFactory;
        Session session = factory.openSession();
        CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();
        CriteriaQuery<Flight> criteriaQuery = criteriaBuilder.createQuery(Flight.class);
        Root<Flight> root = criteriaQuery.from(Flight.class);
        Flight flight = null;
        try{
            flight = session
                    .createQuery(criteriaQuery.select(root).where(criteriaBuilder.equal(root.get("id"), id)))
                    .getSingleResult();
        } catch (Exception e){
            System.out.println("No flight found for flight id booking");
            System.out.println(e.getMessage());
        }
        session.close();
        return flight;
    }
}
package pgfsd.dao;

import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import pgfsd.db.DBUtil;
import pgfsd.entities.User;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import java.util.Arrays;
import java.util.List;

public class UserDao {
    public boolean addUser(User user) {
        user.setEmail(user.getEmail().toLowerCase());
        SessionFactory sessionFactory = DBUtil.sessionFactory;
        Session session = sessionFactory.openSession();
        Transaction transaction = session.beginTransaction();
        try {
            session.merge(user);
            transaction.commit();
            session.close();
            return true;
        } catch (HibernateException e) {
            System.out.println(Arrays.toString(e.getStackTrace()));
            if (transaction != null) {
                transaction.rollback();
            }
            session.close();
            return false;
        }
    }

    public List<User> getAllUsers() {
        SessionFactory factory = DBUtil.sessionFactory;
        Session session = factory.openSession();
        CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();
        CriteriaQuery<User> criteriaQuery = criteriaBuilder.createQuery(User.class);
        Root<User> root = criteriaQuery.from(User.class);
        List<User> allUsers = session
                .createQuery(criteriaQuery.select(root))
                .getResultList();
        session.close();
        return allUsers;
    }

    public boolean deleteUser(User user) {
        user.setEmail(user.getEmail().toLowerCase());
        SessionFactory sessionFactory = DBUtil.sessionFactory;
        Session session = sessionFactory.openSession();
        Transaction transaction = session.beginTransaction();

        try {
            session.delete(user);
            transaction.commit();
            session.close();
            return true;
        } catch (Exception e) {
            System.out.println(Arrays.toString(e.getStackTrace()));
            if (transaction != null) {
                transaction.rollback();
            }
            session.close();
            return false;
        }
    }

    public User checkPassword(User user) {
        user.setEmail(user.getEmail().toLowerCase());
        SessionFactory factory = DBUtil.sessionFactory;
        Session session = factory.openSession();
        CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();
        CriteriaQuery<User> criteriaQuery = criteriaBuilder.createQuery(User.class);
        Root<User> root = criteriaQuery.from(User.class);
        User matchingUser = null;
        try{
            matchingUser = session
                    .createQuery(criteriaQuery.select(root).where(
                            criteriaBuilder.and(
                                    criteriaBuilder.equal(root.get("email"), user.getEmail()),
                                    criteriaBuilder.equal(root.get("password"), user.getPassword())
                            )
                    ))
                    .getSingleResult();
        } catch (Exception e){
            System.out.println("No single user found matching credentials");
            session.close();
            return null;
        }
        session.close();
        return matchingUser;
    }

    public boolean registerNewUser(User user){
        user.setEmail(user.getEmail().toLowerCase());
        if(getAllUsers().size() == 0){
            user.setAdmin(true);
        }
        SessionFactory sessionFactory = DBUtil.sessionFactory;
        Session session = sessionFactory.openSession();
        Transaction transaction = session.beginTransaction();
        try {
            session.save(user);
            transaction.commit();
            session.close();
            return true;
        } catch (HibernateException e) {
            System.out.println(Arrays.toString(e.getStackTrace()));
            if (transaction != null) {
                transaction.rollback();
            }
            session.close();
            return false;
        }
    }
}
package pgfsd.db;

import org.hibernate.SessionFactory;
import org.hibernate.boot.Metadata;
import org.hibernate.boot.MetadataSources;
import org.hibernate.boot.registry.StandardServiceRegistry;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;


public class DBUtil {

    public static final SessionFactory sessionFactory = buildSessionFactory();

    private static SessionFactory buildSessionFactory() {
        try {
            StandardServiceRegistry standardRegistry = new StandardServiceRegistryBuilder()
                    .configure("hibernate.cfg.xml")
                    .build();
            Metadata metaData = new MetadataSources(standardRegistry)
                    .getMetadataBuilder()
                    .build();
            return metaData
                    .getSessionFactoryBuilder()
                    .build();
        } catch (Exception e) {
            System.out.println(e.getMessage());
            throw new ExceptionInInitializerError(e);
        }
    }


}
package pgfsd.entities;

import javax.persistence.*;
import java.util.List;

@Entity
@Table(name = "Airlines")
public class Airline {
    @Id
    @Column(nullable = false, length = 3)
    private String code;
    private String name;


    public Airline() {
    }

    public Airline(String code, String name) {
        this.code = code;
        this.name = name;
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }


}package pgfsd.entities;

import javax.persistence.*;

@Entity
@Table(name = "Bookings")
public class Booking {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    private Integer id;
    @ManyToOne
    @JoinColumn(name = "flight_id")
    private Flight flight;
    @ManyToOne
    @JoinColumn(name = "user_email")
    private User user;
    private Integer seatQuantity;
    private Boolean paid;

    public Booking() {
    }

    public Booking(Integer id) {
        this.id = id;
    }

    public Booking(Flight flight, User user, Integer seatQuantity, Boolean paid) {
        this.flight = flight;
        this.user = user;
        this.seatQuantity = seatQuantity;
        this.paid = paid;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public Flight getFlight() {
        return flight;
    }

    public void setFlight(Flight flight) {
        this.flight = flight;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Integer getSeatQuantity() {
        return seatQuantity;
    }

    public void setSeatQuantity(Integer seatQuantity) {
        this.seatQuantity = seatQuantity;
    }

    public Boolean getPaid() {
        return paid;
    }

    public void setPaid(Boolean paid) {
        this.paid = paid;
    }
}package pgfsd.entities;

import javax.persistence.*;
import java.util.Objects;

@Entity
@Table(name = "Destinations")
public class Destination {
    @Id
    @Column(nullable = false, length = 3)
    private String code;
    @Column(nullable = false)
    private String name;

    public Destination() {
    }

    public Destination(String code, String name) {
        this.code = code;
        this.name = name;
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public boolean equals(Object destination) {
        if (this == destination) return true;
        if (destination == null || getClass() != destination.getClass()) return false;
        Destination that = (Destination) destination;
        return Objects.equals(code, that.code);
    }

    @Override
    public int hashCode() {
        return Objects.hash(code);
    }
}
package pgfsd.entities;

import javax.persistence.*;
import java.util.Date;

@Entity
@Table(name = "Flights")
public class Flight {
    @Id
    @Column(nullable = false)
    private Long id;

    @ManyToOne
    private Airline airline;
    @ManyToOne
    private Destination departureDestination;
    @Column(nullable = false)
    private Date departureDate;
    @ManyToOne
    private Destination arrivalDestination;
    @Column(nullable = false)
    private Date arrivalDate;
    @Column(nullable = false)
    private Double price;

    public Flight() {
    }

    public Flight(Long id, Airline airline, Destination departureDestination, Date departureDate, Destination arrivalDestination, Date arrivalDate, Double price) {
        this.id = id;
        this.airline = airline;
        this.departureDestination = departureDestination;
        this.departureDate = departureDate;
        this.arrivalDestination = arrivalDestination;
        this.arrivalDate = arrivalDate;
        this.price = price;
    }

    public Airline getAirline() {
        return airline;
    }

    public void setAirline(Airline airline) {
        this.airline = airline;
    }

    public Destination getArrivalDestination() {
        return arrivalDestination;
    }

    public void setArrivalDestination(Destination arrivalDestination) {
        this.arrivalDestination = arrivalDestination;
    }

    public Destination getDepartureDestination() {
        return departureDestination;
    }

    public void setDepartureDestination(Destination departureDestination) {
        this.departureDestination = departureDestination;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }


    public Date getDepartureDate() {
        return departureDate;
    }

    public void setDepartureDate(Date departureDate) {
        this.departureDate = departureDate;
    }

    public Date getArrivalDate() {
        return arrivalDate;
    }

    public void setArrivalDate(Date arrivalDate) {
        this.arrivalDate = arrivalDate;
    }

    public Double getPrice() {
        return price;
    }

    public void setPrice(Double price) {
        this.price = price;
    }
}package pgfsd.entities;

import org.hibernate.annotations.ColumnDefault;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name = "Users")
public class User {
    @Id
    @Column(nullable = false)
    private String email;
    @Column(nullable = false)
    private String password;
    @Column(nullable = false)
    private String name;
    @ColumnDefault("false")
    private Boolean admin;

    public User() {
    }

    public User(String email, String password, String name, Boolean admin) {
        this.email = email;
        this.password = password;
        this.name = name;
        this.admin = admin;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boolean getAdmin() {
        return admin;
    }

    public void setAdmin(Boolean admin) {
        this.admin = admin;
    }
}package pgfsd.filter;

import pgfsd.entities.User;

import javax.servlet.*;
import javax.servlet.annotation.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.io.IOException;

@WebFilter(filterName = "AdminFilter", urlPatterns = {"/flights-admin.jsp", "/users-admin.jsp"})
public class AdminFilter implements Filter {
    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws ServletException, IOException {
        HttpServletRequest httpRequest = (HttpServletRequest) request;
        HttpSession session = httpRequest.getSession(false);
        if (session == null ||
                session.getAttribute("logged-user") == null ||
                !((User)session.getAttribute("logged-user")).getAdmin()
        ) {
            request.setAttribute("login-error", "Please login as admin to view this page");
            request.getRequestDispatcher("login.jsp").forward(request, response);
        }
        chain.doFilter(request, response);
    }
}
package pgfsd.filter;

import javax.servlet.*;
import javax.servlet.annotation.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.io.IOException;

@WebFilter(filterName = "LoginFilter",urlPatterns = {"/bookings.jsp"})
public class LoginFilter implements Filter {
    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws ServletException, IOException {
        HttpServletRequest httpRequest = (HttpServletRequest) request;
        HttpSession session = httpRequest.getSession(false);
        if (session == null || session.getAttribute("logged-user") == null) {
            request.setAttribute("login-error", "Please login to view this page");
            request.getRequestDispatcher("login.jsp").forward(request, response);
        }
        chain.doFilter(request, response);
    }
}
package pgfsd.service;

import pgfsd.dao.AirlineDao;
import pgfsd.entities.Airline;

import java.util.List;

public class AirlineService {
    private final AirlineDao airlineDao = new AirlineDao();

    public String getAllAirlines() {
        List<Airline> allAirlines = airlineDao.getAllAirlines();
        if (allAirlines == null || allAirlines.size() == 0) {
            return ("<p>No airlines found</p>");
        } else {
            StringBuilder result = new StringBuilder("<table><tr><td>code</td><td>name</td><td>delete airline</td></tr>");
            for (Airline airline : allAirlines) {
                String deleteForm = String.format("<form action=\"flights-admin.jsp\" method=\"post\">\n" +
                        "    <input type=\"hidden\" value=\"%s\" name=\"airline-delete\" id=\"destination-delete\">\n" +
                        "    <input type=\"submit\" value=\"delete\">\n" +
                        "</form>", airline.getCode());
                result.append("<tr>")
                        .append("<td>")
                        .append(airline.getCode())
                        .append("</td>")
                        .append("<td>")
                        .append(airline.getName())
                        .append("</td>")
                        .append("<td>")
                        .append(deleteForm)
                        .append("</td>")
                        .append("</tr>");
            }
            result.append("</table>");
            return result.toString();
        }
    }

    public String addAirline(Airline airline) {
        if (airline == null) {
            return null;
        }
        if (airline.getName() == null && airline.getCode() == null) {
            return null;
        }
        if (airline.getName().equals("") ||
                airline.getCode().equals("") ||
                airline.getCode().length() != 3) {
            return "Entered airline not valid. Provide an airline code of 3 letters and a required name.";
        }
        boolean success = airlineDao.addAirline(airline);
        if (success) {
            return "Airline added/edited successfully.";
        }
        return "An error occurred adding/editing the airline.";
    }

    public String deleteAirline(Airline airline) {
        if (airline == null || airline.getCode() == null) {
            return null;
        }
        boolean success = airlineDao.deleteAirline(airline);
        if (success) {
            return "Airline has been removed.";
        }
        return "An error occurred deleting the airline. Check there are no flights requiring this airline";
    }
}
package pgfsd.service;

import pgfsd.dao.AirlineDao;
import pgfsd.dao.BookingDao;
import pgfsd.entities.Airline;
import pgfsd.entities.Booking;
import pgfsd.entities.User;

import java.util.List;

public class BookingService {
    private final BookingDao bookingDao = new BookingDao();

    public String getAllBookings(User user) {
        List<Booking> allBookings = bookingDao.getAllBookings(user);
        if (allBookings == null || allBookings.size() == 0) {
            return ("<p>No Bookings found</p>");
        } else {
            StringBuilder result = new StringBuilder("<table><tr><td>id</td><td>nr of seats</td><td>From</td><td>To</td><td>departure date</td><td>arrival date</td><td>price</td><td>Booking email</td></tr>");
            for (Booking booking : allBookings) {
                result.append("<tr>")
                        .append("<td>")
                        .append(booking.getId())
                        .append("</td>")
                        .append("<td>")
                        .append(booking.getSeatQuantity())
                        .append("</td>")
                        .append("<td>")
                        .append(booking.getFlight().getDepartureDestination().getName())
                        .append("</td>")
                        .append("<td>")
                        .append(booking.getFlight().getArrivalDestination().getName())
                        .append("</td>")
                        .append("<td>")
                        .append(booking.getFlight().getDepartureDate())
                        .append("</td>")
                        .append("<td>")
                        .append(booking.getFlight().getArrivalDate())
                        .append("</td>")
                        .append("<td>")
                        .append(booking.getFlight().getPrice())
                        .append("</td>")
                        .append("<td>")
                        .append(booking.getUser().getEmail())
                        .append("</td>")
                        .append("</tr>");
            }
            result.append("</table>");
            return result.toString();
        }
    }

    public String addBooking(Booking booking) {
        if (booking == null) {
            return "Booking not valid";
        }
        if(booking.getUser() == null){
            return "Booking not valid. No user provided.";
        }
        if(booking.getFlight() == null){
            return "Booking not valid. No flight provided.";
        }
        if(booking.getSeatQuantity() == null){
            return "Booking not valid. No valid seat quantity provided.";
        }
        if(!booking.getPaid()){
            return "Booking not valid. No valid payment provided.";
        }

        boolean success = bookingDao.addBooking(booking);
        if (success) {
            return null;
        }
        return "An error occurred adding/editing the booking.";
    }

    public String deleteBooking(Booking booking) {
        if (booking == null || booking.getId() == null) {
            return null;
        }
        boolean success = bookingDao.deleteBooking(booking);
        if (success) {
            return "Booking has been removed.";
        }
        return "An error occurred deleting the booking.";
    }
}
package pgfsd.service;

import pgfsd.dao.DestinationsDao;
import pgfsd.entities.Destination;

import java.util.List;

public class DestinationService {
    private final DestinationsDao destinationsDao = new DestinationsDao();

    public String getAllDestination() {
        List<Destination> allDestinations = destinationsDao.getAllDestinations();
        if (allDestinations == null || allDestinations.size() == 0) {
            return ("<p>No destinations found</p>");
        } else {
            StringBuilder result = new StringBuilder("<table><tr><td>code</td><td>name</td><td>delete destination</td></tr>");
            for (Destination destination : allDestinations) {
                String deleteForm = String.format("<form action=\"flights-admin.jsp\" method=\"post\">\n" +
                        "    <input type=\"hidden\" value=\"%s\" name=\"destination-delete\" id=\"destination-delete\">\n" +
                        "    <input type=\"submit\" value=\"delete\">\n" +
                        "</form>", destination.getCode());
                result.append("<tr>")
                        .append("<td>")
                        .append(destination.getCode())
                        .append("</td>")
                        .append("<td>")
                        .append(destination.getName())
                        .append("</td>")
                        .append("<td>")
                        .append(deleteForm)
                        .append("</td>")
                        .append("</tr>");
            }
            result.append("</table>");
            return result.toString();
        }
    }

    public String addDestination(Destination destination) {
        if (destination == null) {
            return null;
        }
        if (destination.getName() == null && destination.getCode() == null) {
            return null;
        }
        if (destination.getName().equals("") ||
                destination.getCode().equals("") ||
                destination.getCode().length() != 3) {
            return "Entered destination not valid. Provide a destination code of 3 letters and a required name.";
        }
        boolean success = destinationsDao.addDestination(destination);
        if (success) {
            return "Destination added/edited successfully.";
        }
        return "An error occurred adding/editing the destination.";
    }

    public String deleteDestination(Destination destination) {
        if (destination == null || destination.getCode() == null) {
            return null;
        }
        boolean success = destinationsDao.deleteDestination(destination);
        if (success) {
            return "Destination has been removed.";
        }
        return "An error occurred deleting the destination. Check there are no flights requiring this destination";
    }
}
package pgfsd.service;

import pgfsd.dao.AirlineDao;
import pgfsd.dao.DestinationsDao;
import pgfsd.dao.FlightDao;
import pgfsd.entities.Airline;
import pgfsd.entities.Destination;
import pgfsd.entities.Flight;

import java.util.Date;
import java.util.List;


public class FlightService {
    private final FlightDao flightDao = new FlightDao();
    private final AirlineDao airlineDao = new AirlineDao();
    private final DestinationsDao destinationsDao = new DestinationsDao();

    public String getAllFlights() {
        List<Flight> allFlights = flightDao.getAllFlights();
        if (allFlights == null || allFlights.size() == 0) {
            return ("<p>No flights found</p>");
        } else {
            StringBuilder result = new StringBuilder("<table><tr><td>Id</td><td>departure</td><td>departure date</td><td>arrival</td><td>arrival date</td><td>price</td><td>delete flight</td></tr>");
            for (Flight flight : allFlights) {
                String deleteForm = String.format("<form action=\"flights-admin.jsp\" method=\"post\">\n" +
                        "    <input type=\"hidden\" value=\"%s\" name=\"flight-delete\" id=\"flight-delete\">\n" +
                        "    <input type=\"submit\" value=\"delete\">\n" +
                        "</form>", flight.getId().toString());
                result.append("<tr>")
                        .append("<td>")
                        .append(flight.getId())
                        .append("</td>")
                        .append("<td>")
                        .append(flight.getDepartureDestination().getName())
                        .append("</td>")
                        .append("<td>")
                        .append(flight.getDepartureDate().toString())
                        .append("</td>")
                        .append("<td>")
                        .append(flight.getArrivalDestination().getName())
                        .append("</td>")
                        .append("<td>")
                        .append(flight.getArrivalDate().toString())
                        .append("</td>")
                        .append("<td>")
                        .append(flight.getPrice())
                        .append("</td>")
                        .append("<td>")
                        .append(deleteForm)
                        .append("</td>")
                        .append("</tr>");
            }
            result.append("</table>");
            return result.toString();
        }
    }

    public String addFlight(Flight flight) {
        if (flight == null || nullFlight(flight)) {
            return null;
        }
        if (flight.getId() == null) {
            return "Entered Flight not valid. Provide a valid flight id.";
        }
        if (flight.getDepartureDestination() == null) {
            return "Entered Flight not valid. Provide a valid departure destination.";
        }
        if (flight.getArrivalDestination() == null ||
                flight.getArrivalDestination().equals(flight.getDepartureDestination())) {
            return "Entered Flight not valid. Provide a valid arrival destination different from the departure destination.";
        }
        if (flight.getDepartureDate() == null ||
                flight.getDepartureDate().before(new Date(System.currentTimeMillis()))) {
            return "Entered Flight not valid. Provide a valid departure date not in the past.";
        }
        if (flight.getArrivalDate() == null || flight.getArrivalDate().before(flight.getDepartureDate())) {
            return "Entered Flight not valid. Provide a valid arrival date date after the departure date.";
        }
        if (flight.getPrice() == null || flight.getPrice() <= 0) {
            return "Entered Flight not valid. Provide a valid price > 0.";
        }
        boolean success = flightDao.addFlight(flight);
        if (success) {
            return "Flight added/edited successfully.";
        }
        return "An error occurred adding/editing the flight. Check the flight id is not taken already.";
    }

    public String deleteDestination(Flight flight) {
        if (flight == null || nullFlight(flight)) {
            return null;
        }
        boolean success = flightDao.deleteFlight(flight);
        if (success) {
            return "Flight has been removed.";
        }
        return "An error occurred deleting the flight. Check there are no bookings associated with this flights";
    }

    public String getAirlineOptions() {
        List<Airline> airlines = airlineDao.getAllAirlines();
        StringBuilder result = new StringBuilder();
        for (Airline airline : airlines) {
            result.append("<option value=\"")
                    .append(airline.getCode())
                    .append("\">")
                    .append(airline.getName())
                    .append("</option>");
        }
        return result.toString();
    }

    public String getDestinationOptions() {
        List<Destination> destinations = destinationsDao.getAllDestinations();
        StringBuilder result = new StringBuilder();
        for (Destination destination : destinations) {
            result.append("<option value=\"")
                    .append(destination.getCode())
                    .append("\">")
                    .append(destination.getName())
                    .append("</option>");
        }
        return result.toString();
    }

    public String canSearchFlight(Flight flight) {
        if (flight == null) {
            return "No valid Flight provided";
        }
        if (flight.getDepartureDate() == null) {
            return "No valid flight provided. Provide a valid departure date not in the past.";
        }
        if (flight.getDepartureDestination() == null ||
                flight.getDepartureDestination().equals("")) {
            return "No valid flight provided. Provide a valid departure destination.";
        }
        if (flight.getArrivalDestination() == null ||
                flight.getArrivalDestination().equals("") ||
                flight.getArrivalDestination().equals(flight.getDepartureDestination())) {
            return "No valid flight provided. Provide a valid arrival destination different from the departure destination.";
        }
        return null;
    }

    public String searchFlights(Flight searchFlight){
        List<Flight> matchingFlights = flightDao.searchFlights(searchFlight);
        if(matchingFlights.size() == 0){
            return "<p>No matching flights found</p>";
        }
        StringBuilder result = new StringBuilder("<table><tr><td>From</td><td>To</td><td>departure date</td><td>arrival date</td><td>price</td><td>book</td></tr>");
        for (Flight flight : matchingFlights) {
            String bookLink = String.format("<a href=\"book-flight.jsp?flight=%s\">book</a>", flight.getId().toString());
            result.append("<tr>")
                    .append("<td>")
                    .append(flight.getDepartureDestination().getName())
                    .append("</td>")
                    .append("<td>")
                    .append(flight.getArrivalDestination().getName())
                    .append("</td>")
                    .append("<td>")
                    .append(flight.getDepartureDate().toString())
                    .append("</td>")
                    .append("<td>")
                    .append(flight.getArrivalDate().toString())
                    .append("</td>")
                    .append("<td>")
                    .append(flight.getPrice())
                    .append("</td>")
                    .append("<td>")
                    .append(bookLink)
                    .append("</td>")
                    .append("</tr>");
        }
        result.append("</table>");
        return result.toString();
    }

    public String getFlightDetails(String id){
        if(id == null || id.equals("")){
            return null;
        }
        Flight flight = getFlightById(id);
        if(flight == null){
            return null;
        }
        StringBuilder result = new StringBuilder("<table><tr><td>From</td><td>To</td><td>departure date</td><td>arrival date</td><td>price</td></tr>")
                .append("<tr>")
                .append("<td>")
                .append(flight.getDepartureDestination().getName())
                .append("</td>")
                .append("<td>")
                .append(flight.getArrivalDestination().getName())
                .append("</td>")
                .append("<td>")
                .append(flight.getDepartureDate().toString())
                .append("</td>")
                .append("<td>")
                .append(flight.getArrivalDate().toString())
                .append("</td>")
                .append("<td id=\"flight-price\">")
                .append(flight.getPrice())
                .append("</td>")
                .append("</tr>")
                .append("</table>");
        return result.toString();
    }

    public Flight getFlightById(String id){
        return flightDao.getFlightById(id);
    }

    private boolean nullFlight(Flight flight) {
        return flight.getId() == null &&
                flight.getDepartureDestination() == null &&
                flight.getAirline() == null &&
                flight.getArrivalDate() == null &&
                flight.getArrivalDestination() == null &&
                flight.getDepartureDate() == null &&
                flight.getPrice() == null;
    }
}
package pgfsd.service;

import pgfsd.dao.AirlineDao;
import pgfsd.dao.UserDao;
import pgfsd.entities.User;

import java.util.List;

public class UserService {
    private final UserDao userDao = new UserDao();

    public String getAllUsers() {
        List<User> allUsers = userDao.getAllUsers();
        if (allUsers == null || allUsers.size() == 0) {
            return ("<p>No users found</p>");
        } else {
            StringBuilder result = new StringBuilder("<table><tr><td>name</td><td>email</td><td>password</td><td>admin</td><td>delete airline</td></tr>");
            for (User user : allUsers) {
                String deleteForm = String.format("<form action=\"users-admin.jsp\" method=\"post\">\n" +
                        "    <input type=\"hidden\" value=\"%s\" name=\"user-delete\" id=\"destination-delete\">\n" +
                        "    <input type=\"submit\" value=\"delete\">\n" +
                        "</form>", user.getEmail());
                result.append("<tr>")
                        .append("<td>")
                        .append(user.getName())
                        .append("</td>")
                        .append("<td>")
                        .append(user.getEmail())
                        .append("</td>")
                        .append("<td>")
                        .append(user.getPassword())
                        .append("</td>")
                        .append("<td>")
                        .append(user.getAdmin())
                        .append("</td>")
                        .append("<td>")
                        .append(deleteForm)
                        .append("</td>")
                        .append("</tr>");
            }
            result.append("</table>");
            return result.toString();
        }
    }

    public String addUser(User user) {
        if (user == null) {
            return null;
        }
        if (user.getEmail() == null || user.getEmail().equals("")) {
            return "User not valid. Provide a valid email";
        }
        if (user.getPassword() == null || user.getPassword().equals("")) {
            return "User not valid. Provide a valid password";
        }
        if (user.getName() == null || user.getName().equals("")) {
            return "User not valid. Provide a valid name";
        }
        boolean success = userDao.addUser(user);
        if (success) {
            return "User added/edited successfully.";
        }
        return "An error occurred adding/editing the user.";
    }

    public String deleteUser(User user) {
        if (user == null || user.getEmail() == null || user.getEmail().equals("")) {
            return "Not a valid user to delete.";
        }
        boolean success = userDao.deleteUser(user);
        if (success) {
            return "User has been removed.";
        }
        return "An error occurred deleting the user";
    }

    public User checkUserCredentials(User user){
        if(user == null ||
                user.getEmail() == null ||
                user.getEmail().equals("") ||
                user.getPassword() == null ||
                user.getPassword().equals("")
        ){
            return null;
        }
        return userDao.checkPassword(user);
    }

    public String registerNerUser(User user){
        if(user == null) {
            return "User not valid";
        }
        if (user.getEmail() == null || user.getEmail().equals("")) {
            return "User not valid. Provide a valid email";
        }
        if (user.getPassword() == null || user.getPassword().equals("")) {
            return "User not valid. Provide a valid password";
        }
        if (user.getName() == null || user.getName().equals("")) {
            return "User not valid. Provide a valid name";
        }
        boolean success = userDao.registerNewUser(user);
        if (success) {
            return null;
        }
        return "An error occurred registering new user.";
    }
}

<html>
<head>
    <title>Book Flight</title>
</head>
<body>
<h1>Book Flight</h1>
<h2>Flight details</h2>
<jsp:include page="/flight-booking-controller"></jsp:include>
<div>
    <%=session.getAttribute("booking-flight")%>
</div>
<%
    if(session.getAttribute("logged-user") == null){
        %>
<a href="login.jsp?flight=<%=request.getParameter("flight")%>">Login or register</a>
<%
    } else {
%>
<h2>Booking Information</h2>
<form action="book-flight.jsp" method="post">
    <input type="hidden" value="<%=request.getParameter("flight")%>" name="flight" id="flight">
    <label for="booking-quantity">Quantity of seats to book</label>
    <input type="number" min="1" value="1" id="booking-quantity" name="booking-quantity">
    <br>
    <h3>Total Price</h3>
    <p id="total-price"></p>
    <label for="booking-credit-card">Payment credit card</label><input type="tel" id="booking-credit-card" name="booking-credit-card">
    <br>
    <input type="submit" value="book now">
</form>

<%
    }
    String bookingSuccess = (String) request.getAttribute("booking-success");
    if(bookingSuccess != null){
        out.print(bookingSuccess);
    }
%>

<script>
    const priceString = document.querySelector("#flight-price").innerText;
    const price = parseInt(priceString, 10);

    const totalPriceElement = document.querySelector("#total-price");
    totalPriceElement.innerText = price;

    const priceUpdate = (event) => {
        totalPriceElement.innerText = price * parseInt(event.target.value);
    }
    document.querySelector("#booking-quantity").addEventListener("input", priceUpdate)
</script>
</body>
</html>

<html>
<head>
    <title>Bookings</title>
</head>
<body>
<jsp:include page="/bookings-controller"></jsp:include>
<h1>Bookings</h1>
<div>
    <%
        String bookingSuccess = (String) request.getAttribute("booking-success");
        if (bookingSuccess != null) {
         out.print(bookingSuccess);
        }
    %>
    <%=session.getAttribute("bookings")%>
</div>
</body>
</html>
<html>
<head>
    <title>Flights Administration</title>
</head>
<body>
<jsp:include page="/flight-admin-controller"></jsp:include>
<h1>Manage Flights</h1>
<h2>Airlines</h2>
<form action="flights-admin.jsp" method="post">
    <label for="airline-code">Code</label>
    <input type="text" name="airline-code" id="airline-code">
    <label for="airline-name">Name</label>
    <input type="text" name="airline-name" id="airline-name">
    <input type="submit" value="add/edit airline">
</form>
<div>
    <%
        String addedAirline = (String) request.getAttribute("airline-added");
        if (addedAirline != null) {
            out.print(addedAirline);
        }

        String deletedAirline = (String) request.getAttribute("airline-deleted");
        if (deletedAirline != null) {
            out.print(deletedAirline);
        }

        String airlines = (String) session.getAttribute("airlines");
        out.print(airlines);

    %>
</div>
<h2>Destinations</h2>
<form action="flights-admin.jsp" method="post">
    <label for="destination-code">Code</label>
    <input type="text" name="destination-code" id="destination-code">
    <label for="destination-name">Name</label>
    <input type="text" name="destination-name" id="destination-name">
    <input type="submit" value="add/edit destination">
</form>
<div>
    <%
        String addedDestination = (String) request.getAttribute("destination-added");
        if (addedDestination != null) {
            out.print(addedDestination);
        }

        String deletedDestination = (String) request.getAttribute("destination-deleted");
        if (deletedDestination != null) {
            out.print(deletedDestination);
        }

        String destinations = (String) session.getAttribute("destinations");
        out.print(destinations);

    %>
</div>
<h2>Flights</h2>
<form action="flights-admin.jsp" method="post">
    <label for="flight-id">Id</label>
    <input type="text" name="flight-id" id="flight-id">
    <label for="flight-airline">Airline</label>
    <select name="flight-airline" id="flight-airline">
        <%
            out.print((String) session.getAttribute("flight-airlines"));
        %>
    </select>
    <br>
    <label for="flight-departure-destination">Departure</label>
    <select name="flight-departure-destination" id="flight-departure-destination">
        <%
            out.print((String) session.getAttribute("flight-destinations"));
        %>
    </select>
    <label for="flight-arrival-destination">Departure</label>
    <select name="flight-arrival-destination" id="flight-arrival-destination">
        <%
            out.print((String) session.getAttribute("flight-destinations"));
        %>
    </select>
    <br>
    <label for="flight-departure-date">Departure Date</label>
    <input type="datetime-local" id="flight-departure-date" name="flight-departure-date">
    <label for="flight-arrival-date">Arrival Date</label>
    <input type="datetime-local" id="flight-arrival-date" name="flight-arrival-date">
    <br>
    <label for="flight-price">Price</label>
    <input type="text" name="flight-price" id="flight-price">
    <br>
    <input type="submit" value="add/edit flight">
</form>
<div>
    <%
        String addedFlight = (String) request.getAttribute("flight-added");
        if (addedFlight != null) {
            out.print(addedFlight);
        }

        String deletedFlight = (String) request.getAttribute("flight-deleted");
        if (deletedFlight != null) {
            out.print(deletedFlight);
        }

        String flights = (String) session.getAttribute("flights");
        out.print(flights);
    %>
</div>
</body>
</html>
<%@ page import="pgfsd.entities.Flight" %>
<%@ page import="pgfsd.entities.User" %>
<!DOCTYPE html>
<html>
<head>
    <title>Fly Away</title>
</head>
<body>
<h1>Fly Away</h1>
<h2>Book Flight</h2>
<jsp:include page="/flight-selection-controller"></jsp:include>
<form action="index.jsp" method="post">
    <label for="departure-destination">Departure</label>
    <select
            id="departure-destination"
            name="departure-destination"
    >
        <%
            String destinationOptions = (String) session.getAttribute("destination-options");
            out.print(destinationOptions);
        %>
    </select>
    <label for="arrival-destination">Arrival</label>
    <select
            id="arrival-destination"
            name="arrival-destination"
    >
        <%
            out.print(destinationOptions);
        %>
    </select>
    <label for="departure-date">Departure Date</label>
    <input
            type="date"
            id="departure-date"
            name="departure-date"
            value="<%=session.getAttribute("departure-date")%>"
    >
    <br>
    <input type="submit" value="Find Flight">
</form>
<p>
    <%
        String searchError = (String) request.getAttribute("search-error");
        if (searchError != null) {
            out.print(searchError);
        }
    %>
</p>
<br/>
<h2>
    <%
        Flight searchFlight = (Flight) session.getAttribute("search-flight");
        if (searchFlight != null) {
            out.println("Flights found");
        }
    %>
</h2>
<div>
    <%
        String matchingFlights = (String) session.getAttribute("matching-flights");
        if (matchingFlights != null) {
            out.print(matchingFlights);
        }
    %>
</div>
<br/>
<a href="bookings.jsp">Bookings</a>
<a href="flights-admin.jsp">Flight Administration</a>
<a href="users-admin.jsp">Users Administration</a>
<br>
<a href="login.jsp">Login/Register</a>
<a href="logout-controller">Logout</a>
<div>
    <%
        String logoutSuccess = (String) request.getAttribute("logout-success");
        if (logoutSuccess != null) {
            out.print(logoutSuccess);
        }
        User loggedUser = (User) session.getAttribute("logged-user");
        if (loggedUser != null) {
            out.print("Logged in");
        }
    %>
</div>
</body>
</html><html>
<head>
    <title>Login/Register</title>
</head>
<body>
<h1>Login or Register</h1>
<h2>Login</h2>
<form action="login-controller" method="post">
    <input type="hidden" value="<%=request.getParameter("flight")%>" name="flight" id="flight">
    <label for="email">Email</label>
    <br>
    <input type="email" id="email" name="email">
    <br>
    <label for="password">Password</label>
    <br>
    <input type="password" id="password" name="password">
    <br>
    <input type="submit" value="login">
</form>
<p>
    <%
        String loginError = (String) request.getAttribute("login-error");
        if(loginError != null){
            out.print(loginError);
        }
    %>
</p>

<h2>Register</h2>
<form action="register-user-controller" method="post">
    <input type="hidden" value="<%=request.getParameter("flight")%>" name="flight" id="flight">
    <label for="name">Name</label>
    <br>
    <input type="text" id="name" name="name">
    <br>
    <label for="email">Email</label>
    <br>
    <input type="email" id="email" name="email">
    <br>
    <label for="password">Password</label>
    <br>
    <input type="password" id="password" name="password">
    <br>
    <input type="submit" value="Register">
</form>
<p>
    <%
        String registerError = (String) request.getAttribute("registration-error");
        if(registerError != null){
            out.print(registerError);
        }
    %>
</p>
</body>
</html>
<html>
<head>
    <title>Users Administration</title>
</head>
<body>

<jsp:include page="/user-admin-controller"></jsp:include>
<h1>Users Administration</h1>
<form action="users-admin.jsp" method="post">
    <label for="name">Name</label>
    <input type="text" id="name" name="name">
    <label for="email">Email</label>
    <input type="email" id="email" name="email">
    <label for="password">Password</label>
    <input type="password" id="password" name="password">
    <label for="admin">Admin</label>
    <input type="checkbox" id="admin" name="admin">
    <input type="submit" value="Save/edit user">
</form>
<div>
    <%
        String userAdded = (String) request.getAttribute("user-added");
        if (userAdded != null) {
            System.out.println(userAdded);
        }

        String userDeleted = (String) request.getAttribute("user-deleted");
        if (userDeleted != null) {
            System.out.println(userDeleted);
        }
    %>
</div>
<div>
    <%
        String users = (String) session.getAttribute("users");
        out.print(users);
    %>
</div>
</body>
</html>
<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <!-- Database connection settings -->
        <property name="hibernate.connection.driver_class">com.mysql.cj.jdbc.Driver</property>
        <property name="hibernate.connection.url">jdbc:mysql://localhost:3306/flyaway</property>
        <property name="hibernate.connection.username">root</property>
        <property name="hibernate.connection.password">test1234</property>
        <property name="hibernate.dialect">org.hibernate.dialect.MySQL8Dialect</property>
        <property name="hibernate.hbm2ddl.auto">update</property>

        <property name="show_sql">true</property>
        <mapping class="pgfsd.entities.Airline"/>
        <mapping class="pgfsd.entities.Destination"/>
        <mapping class="pgfsd.entities.Flight"/>
        <mapping class="pgfsd.entities.User"/>
        <mapping class="pgfsd.entities.Booking"/>


    </session-factory>
</hibernate-configuration>
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
</web-app>